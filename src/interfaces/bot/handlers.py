from aiogram import Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton
from aiogram.filters import Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from src.application.use_cases.user_management import UserManagementUseCase
from src.application.use_cases.rating_management import RatingManagementUseCase
from src.domain.entities.user import User
from .filters import CreatorFilter, RegistrationFilter, NonRegistrationFilter
from .states import UserForm, UserFormData
from .errors import Errors
from src.application.services.user_service import UserService
from src.application.services.rating_service import RatingService
from src.interfaces.bot.states import UserStates
from src.interfaces.bot.filters import UserFilter
from src.interfaces.bot.dependencies import get_user_service, get_rating_service


def register_handlers(dp: Dispatcher) -> None:
    """–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –≤—Å–µ—Ö –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥"""
    router = Router()
    
    # –ö–æ–º–∞–Ω–¥—ã
    router.message.register(start_handler, Command(commands=["start"]))
    router.message.register(help_handler, Command(commands=["help"]))
    router.message.register(profile_handler, Command(commands=["profile"]))
    router.message.register(settings_handler, Command(commands=["settings"]))
    router.message.register(registration_handler, Command(commands=["register"]))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    router.message.register(
        set_user_info_handler,
        StateFilter(UserStates.waiting_for_name),
        UserFilter()
    )
    router.message.register(
        set_photo_handler,
        StateFilter(UserStates.waiting_for_photo),
        UserFilter()
    )
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–Ω–æ–ø–æ–∫
    router.message.register(
        cancel_handler,
        F.text == "–û—Ç–º–µ–Ω–∞",
        UserFilter()
    )
    router.message.register(
        rating_handler,
        F.text == "–†–µ–π—Ç–∏–Ω–≥",
        UserFilter()
    )
    router.message.register(
        press_handler,
        F.text == "–ù–∞–∂–∞—Ç—å",
        UserFilter()
    )
    router.message.register(
        settings_handler,
        F.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏",
        UserFilter()
    )
    
    dp.include_router(router)


async def start_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="–ù–∞–∂–∞—Ç—å")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±–æ—Ç –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –Ω–∞–∂–∞—Ç–∏–π.\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –∫–æ–º–∞–Ω–¥.",
        reply_markup=keyboard
    )


async def help_handler(message: Message) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    await message.answer(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/start - –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É\n"
        "–†–µ–π—Ç–∏–Ω–≥ - –ü–æ–∫–∞–∑–∞—Ç—å —Ä–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n"
        "–ù–∞–∂–∞—Ç—å - –£–≤–µ–ª–∏—á–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π\n"
        "–ù–∞—Å—Ç—Ä–æ–π–∫–∏ - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å"
    )


async def profile_handler(message: Message, user_service: UserService) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    user = await user_service.get_user(message.from_user.id)
    if not user:
        await message.answer("–í—ã –Ω–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /register –¥–ª—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return
        
    text = (
        f"üë§ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:\n\n"
        f"–ò–º—è: {user.name}\n"
        f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è: {user.info}\n"
        f"–ù–∞–∂–∞—Ç–∏–π: {user.taps}\n"
    )
    
    if user.photo:
        await message.answer_photo(user.photo, caption=text)
    else:
        await message.answer(text)


async def settings_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /settings."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_name)


async def registration_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /register."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –î–∞–≤–∞–π—Ç–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –≤–∞—Å.\n"
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=keyboard
    )
    await state.set_state(UserStates.waiting_for_name)


async def cancel_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –æ—Ç–º–µ–Ω—ã."""
    await message.answer("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    if await state.get_state() is not None:
        await state.clear()


async def rating_handler(
    message: Message,
    user_management: UserManagementUseCase,
    rating_management: RatingManagementUseCase,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã —Ä–µ–π—Ç–∏–Ω–≥–∞."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_management.get_user_by_telegram_id(message.from_user.id)
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    top_users = await rating_management.get_top_users(limit=10)
    
    # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π
    total_taps = await rating_management.get_total_taps()
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
    text = (
        f"üìä –†–µ–π—Ç–∏–Ω–≥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π\n\n"
        f"–í–∞—à–∏ –Ω–∞–∂–∞—Ç–∏—è: {user.taps}\n"
        f"–í—Å–µ–≥–æ –Ω–∞–∂–∞—Ç–∏–π: {total_taps}\n\n"
        "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    )
    
    for i, top_user in enumerate(top_users, 1):
        text += f"{i}. {top_user.username or '–ê–Ω–æ–Ω–∏–º'}: {top_user.taps}\n"
    
    await message.answer(text)


async def press_handler(
    message: Message,
    user_management: UserManagementUseCase,
    rating_management: RatingManagementUseCase,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞–∂–∞—Ç–∏—è."""
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_management.get_user_by_telegram_id(message.from_user.id)
    
    # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π
    updated_user = await rating_management.increment_taps(user.id)
    
    await message.answer(f"–ù–∞–∂–∞—Ç–∏–π: {updated_user.taps}")


async def set_user_info_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ—Ñ–∏–ª—è."""
    keyboard = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text="–û—Ç–º–µ–Ω–∞")]],
        resize_keyboard=True
    )
    await message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è:",
        reply_markup=keyboard
    )
    await state.set_state(UserForm.name)


async def set_name_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏."""
    await state.update_data(name=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ:")
    await state.set_state(UserForm.info)


async def set_info_handler(message: Message, state: FSMContext) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏."""
    await state.update_data(info=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é:")
    await state.set_state(UserForm.photo)


async def set_photo_handler(
    message: Message,
    state: FSMContext,
    user_management: UserManagementUseCase,
    rating_management: RatingManagementUseCase,
) -> None:
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏–∏."""
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é.")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã
    form_data = await state.get_data()
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user = await user_management.get_user_by_telegram_id(message.from_user.id)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    await user_management.update_user(
        user.id,
        first_name=form_data["name"],
    )
    await rating_management.update_user_info(user.id, form_data["info"])
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é
    photo = message.photo[-1]
    file = await message.bot.get_file(photo.file_id)
    photo_url = f"https://api.telegram.org/file/bot{message.bot.token}/{file.file_path}"
    await rating_management.update_user_photo(user.id, photo_url)
    
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–†–µ–π—Ç–∏–Ω–≥"), KeyboardButton(text="–ù–∞–∂–∞—Ç—å")],
            [KeyboardButton(text="–ù–∞—Å—Ç—Ä–æ–π–∫–∏")]
        ],
        resize_keyboard=True
    )
    
    await message.answer(
        "–ü—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω!",
        reply_markup=keyboard
    ) 
    await state.clear() 