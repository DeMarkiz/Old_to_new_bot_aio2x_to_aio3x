import logging
import asyncio
from datetime import datetime, timedelta

from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger
from loguru import logger

from src.application.use_cases.user_management import UserManagementUseCase
from src.application.use_cases.rating_management import RatingManagementUseCase
from src.config import settings
from src.infrastructure.database.session import create_session_factory
from src.infrastructure.services.user_service_impl import UserServiceImpl
from src.infrastructure.database.repositories.user_repository_impl import UserRepositoryImpl


logger = logging.getLogger(__name__)


async def send_daily_digest(
    bot,
    user_management: UserManagementUseCase,
    rating_management: RatingManagementUseCase,
) -> None:
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º."""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        users = await user_management.get_users(active=True)
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        top_users = await rating_management.get_top_users(limit=5)
        
        # –ü–æ–ª—É—á–∞–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–∂–∞—Ç–∏–π
        total_taps = await rating_management.get_total_taps()
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        text = (
            "üìä –ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –¥–∞–π–¥–∂–µ—Å—Ç\n\n"
            f"–í—Å–µ–≥–æ –Ω–∞–∂–∞—Ç–∏–π: {total_taps}\n\n"
            "–¢–æ–ø –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
        )
        
        for i, user in enumerate(top_users, 1):
            text += f"{i}. {user.username or '–ê–Ω–æ–Ω–∏–º'}: {user.taps}\n"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º
        for user in users:
            try:
                await bot.send_message(user.telegram_id, text)
            except Exception as e:
                logger.error(f"Failed to send digest to user {user.telegram_id}: {e}")
    
    except Exception as e:
        logger.error(f"Failed to send daily digest: {e}")


async def setup_scheduler(
    bot,
    user_management: UserManagementUseCase,
    rating_management: RatingManagementUseCase,
) -> AsyncIOScheduler:
    """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á."""
    scheduler = AsyncIOScheduler()
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –¥–∞–π–¥–∂–µ—Å—Ç–∞
    scheduler.add_job(
        send_daily_digest,
        CronTrigger(hour=20, minute=0),  # –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 20:00
        args=[bot, user_management, rating_management],
        id="daily_digest",
        replace_existing=True,
    )
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("Scheduler started")
    
    return scheduler 